// Code generated by MockGen. DO NOT EDIT.
// Source: city.go
//
// Generated by this command:
//
//	mockgen -source city.go -destination mock_city.go -package domain
//

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCityRepository is a mock of CityRepository interface.
type MockCityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCityRepositoryMockRecorder
}

// MockCityRepositoryMockRecorder is the mock recorder for MockCityRepository.
type MockCityRepositoryMockRecorder struct {
	mock *MockCityRepository
}

// NewMockCityRepository creates a new mock instance.
func NewMockCityRepository(ctrl *gomock.Controller) *MockCityRepository {
	mock := &MockCityRepository{ctrl: ctrl}
	mock.recorder = &MockCityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCityRepository) EXPECT() *MockCityRepositoryMockRecorder {
	return m.recorder
}

// GetAllCities mocks base method.
func (m *MockCityRepository) GetAllCities() ([]City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCities")
	ret0, _ := ret[0].([]City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCities indicates an expected call of GetAllCities.
func (mr *MockCityRepositoryMockRecorder) GetAllCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCities", reflect.TypeOf((*MockCityRepository)(nil).GetAllCities))
}

// GetCity mocks base method.
func (m *MockCityRepository) GetCity(name string) (*City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCity", name)
	ret0, _ := ret[0].(*City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCity indicates an expected call of GetCity.
func (mr *MockCityRepositoryMockRecorder) GetCity(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCity", reflect.TypeOf((*MockCityRepository)(nil).GetCity), name)
}
