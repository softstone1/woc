// Code generated by MockGen. DO NOT EDIT.
// Source: city_service.go
//
// Generated by this command:
//
//	mockgen -source city_service.go -destination mock_city.go -package app
//

// Package app is a generated GoMock package.
package app

import (
	context "context"
	reflect "reflect"

	domain "github.com/softstone1/woc/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockWeatherService is a mock of WeatherService interface.
type MockWeatherService struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherServiceMockRecorder
}

// MockWeatherServiceMockRecorder is the mock recorder for MockWeatherService.
type MockWeatherServiceMockRecorder struct {
	mock *MockWeatherService
}

// NewMockWeatherService creates a new mock instance.
func NewMockWeatherService(ctrl *gomock.Controller) *MockWeatherService {
	mock := &MockWeatherService{ctrl: ctrl}
	mock.recorder = &MockWeatherServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherService) EXPECT() *MockWeatherServiceMockRecorder {
	return m.recorder
}

// GetAllCities mocks base method.
func (m *MockWeatherService) GetAllCities() ([]domain.City, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCities")
	ret0, _ := ret[0].([]domain.City)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCities indicates an expected call of GetAllCities.
func (mr *MockWeatherServiceMockRecorder) GetAllCities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCities", reflect.TypeOf((*MockWeatherService)(nil).GetAllCities))
}

// GetWeatherByCity mocks base method.
func (m *MockWeatherService) GetWeatherByCity(ctx context.Context, cityName string) (*domain.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherByCity", ctx, cityName)
	ret0, _ := ret[0].(*domain.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherByCity indicates an expected call of GetWeatherByCity.
func (mr *MockWeatherServiceMockRecorder) GetWeatherByCity(ctx, cityName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherByCity", reflect.TypeOf((*MockWeatherService)(nil).GetWeatherByCity), ctx, cityName)
}
